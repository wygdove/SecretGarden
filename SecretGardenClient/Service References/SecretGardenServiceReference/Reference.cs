//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SecretGardenClient.SecretGardenServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/SecretGardenServer")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SecretGardenClient.SecretGardenServiceReference.Room))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SecretGardenClient.SecretGardenServiceReference.User[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<int, SecretGardenClient.SecretGardenServiceReference.Room>))]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object callbackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string iconField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int inRoomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object callback {
            get {
                return this.callbackField;
            }
            set {
                if ((object.ReferenceEquals(this.callbackField, value) != true)) {
                    this.callbackField = value;
                    this.RaisePropertyChanged("callback");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string icon {
            get {
                return this.iconField;
            }
            set {
                if ((object.ReferenceEquals(this.iconField, value) != true)) {
                    this.iconField = value;
                    this.RaisePropertyChanged("icon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int inRoom {
            get {
                return this.inRoomField;
            }
            set {
                if ((this.inRoomField.Equals(value) != true)) {
                    this.inRoomField = value;
                    this.RaisePropertyChanged("inRoom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Room", Namespace="http://schemas.datacontract.org/2004/07/SecretGardenServer")]
    [System.SerializableAttribute()]
    public partial class Room : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SecretGardenClient.SecretGardenServiceReference.User[] usersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SecretGardenClient.SecretGardenServiceReference.User[] users {
            get {
                return this.usersField;
            }
            set {
                if ((object.ReferenceEquals(this.usersField, value) != true)) {
                    this.usersField = value;
                    this.RaisePropertyChanged("users");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="SecretGardenServer", ConfigurationName="SecretGardenServiceReference.ISecretGardenService", CallbackContract=typeof(SecretGardenClient.SecretGardenServiceReference.ISecretGardenServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ISecretGardenService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/Regist")]
        void Regist(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/Regist")]
        System.Threading.Tasks.Task RegistAsync(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/Login")]
        void Login(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/Login")]
        System.Threading.Tasks.Task LoginAsync(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/Logout")]
        void Logout(string user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/Logout")]
        System.Threading.Tasks.Task LogoutAsync(string user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/EnterHall")]
        void EnterHall(string user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/EnterHall")]
        System.Threading.Tasks.Task EnterHallAsync(string user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/RegistRoom")]
        void RegistRoom(string user, string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/RegistRoom")]
        System.Threading.Tasks.Task RegistRoomAsync(string user, string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/EnterRoom")]
        void EnterRoom(string user, int roomNumber);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/EnterRoom")]
        System.Threading.Tasks.Task EnterRoomAsync(string user, int roomNumber);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/SendMessage")]
        void SendMessage(int room, string user, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(int room, string user, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/SendInk")]
        void SendInk(int room, string ink);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/SendInk")]
        System.Threading.Tasks.Task SendInkAsync(int room, string ink);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISecretGardenServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/CallbackShowRegistStatus")]
        void CallbackShowRegistStatus(int loginCode, SecretGardenClient.SecretGardenServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/CallbackShowLoginStatus")]
        void CallbackShowLoginStatus(int loginCode, SecretGardenClient.SecretGardenServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/CallbackShowHall")]
        void CallbackShowHall(System.Collections.Generic.Dictionary<int, SecretGardenClient.SecretGardenServiceReference.Room> rooms);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/CallbackEnterRoom")]
        void CallbackEnterRoom(SecretGardenClient.SecretGardenServiceReference.Room room);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/CallbackShowRoom")]
        void CallbackShowRoom(SecretGardenClient.SecretGardenServiceReference.Room room);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/CallbackShowMessage")]
        void CallbackShowMessage(string who, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/CallbackShowInk")]
        void CallbackShowInk(string ink);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="SecretGardenServer/ISecretGardenService/CallbackStartNewTurn")]
        void CallbackStartNewTurn(SecretGardenClient.SecretGardenServiceReference.Room room);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISecretGardenServiceChannel : SecretGardenClient.SecretGardenServiceReference.ISecretGardenService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SecretGardenServiceClient : System.ServiceModel.DuplexClientBase<SecretGardenClient.SecretGardenServiceReference.ISecretGardenService>, SecretGardenClient.SecretGardenServiceReference.ISecretGardenService {
        
        public SecretGardenServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SecretGardenServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SecretGardenServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SecretGardenServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SecretGardenServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Regist(string user, string password) {
            base.Channel.Regist(user, password);
        }
        
        public System.Threading.Tasks.Task RegistAsync(string user, string password) {
            return base.Channel.RegistAsync(user, password);
        }
        
        public void Login(string user, string password) {
            base.Channel.Login(user, password);
        }
        
        public System.Threading.Tasks.Task LoginAsync(string user, string password) {
            return base.Channel.LoginAsync(user, password);
        }
        
        public void Logout(string user) {
            base.Channel.Logout(user);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string user) {
            return base.Channel.LogoutAsync(user);
        }
        
        public void EnterHall(string user) {
            base.Channel.EnterHall(user);
        }
        
        public System.Threading.Tasks.Task EnterHallAsync(string user) {
            return base.Channel.EnterHallAsync(user);
        }
        
        public void RegistRoom(string user, string name) {
            base.Channel.RegistRoom(user, name);
        }
        
        public System.Threading.Tasks.Task RegistRoomAsync(string user, string name) {
            return base.Channel.RegistRoomAsync(user, name);
        }
        
        public void EnterRoom(string user, int roomNumber) {
            base.Channel.EnterRoom(user, roomNumber);
        }
        
        public System.Threading.Tasks.Task EnterRoomAsync(string user, int roomNumber) {
            return base.Channel.EnterRoomAsync(user, roomNumber);
        }
        
        public void SendMessage(int room, string user, string message) {
            base.Channel.SendMessage(room, user, message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(int room, string user, string message) {
            return base.Channel.SendMessageAsync(room, user, message);
        }
        
        public void SendInk(int room, string ink) {
            base.Channel.SendInk(room, ink);
        }
        
        public System.Threading.Tasks.Task SendInkAsync(int room, string ink) {
            return base.Channel.SendInkAsync(room, ink);
        }
    }
}
